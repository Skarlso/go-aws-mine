// Code generated by protoc-gen-go. DO NOT EDIT.
// source: furnace.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	furnace.proto

It has these top-level messages:
	Stack
	Proceed
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type Stack struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Stack) Reset()                    { *m = Stack{} }
func (m *Stack) String() string            { return proto1.CompactTextString(m) }
func (*Stack) ProtoMessage()               {}
func (*Stack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Stack) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Proceed struct {
	Failed bool `protobuf:"varint,1,opt,name=failed" json:"failed,omitempty"`
}

func (m *Proceed) Reset()                    { *m = Proceed{} }
func (m *Proceed) String() string            { return proto1.CompactTextString(m) }
func (*Proceed) ProtoMessage()               {}
func (*Proceed) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Proceed) GetFailed() bool {
	if m != nil {
		return m.Failed
	}
	return false
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto1.RegisterType((*Stack)(nil), "proto.Stack")
	proto1.RegisterType((*Proceed)(nil), "proto.Proceed")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PreCreate service

type PreCreateClient interface {
	Execute(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Proceed, error)
}

type preCreateClient struct {
	cc *grpc.ClientConn
}

func NewPreCreateClient(cc *grpc.ClientConn) PreCreateClient {
	return &preCreateClient{cc}
}

func (c *preCreateClient) Execute(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Proceed, error) {
	out := new(Proceed)
	err := grpc.Invoke(ctx, "/proto.PreCreate/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PreCreate service

type PreCreateServer interface {
	Execute(context.Context, *Stack) (*Proceed, error)
}

func RegisterPreCreateServer(s *grpc.Server, srv PreCreateServer) {
	s.RegisterService(&_PreCreate_serviceDesc, srv)
}

func _PreCreate_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreCreateServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PreCreate/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreCreateServer).Execute(ctx, req.(*Stack))
	}
	return interceptor(ctx, in, info, handler)
}

var _PreCreate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PreCreate",
	HandlerType: (*PreCreateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _PreCreate_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "furnace.proto",
}

// Client API for PostCreate service

type PostCreateClient interface {
	Execute(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Empty, error)
}

type postCreateClient struct {
	cc *grpc.ClientConn
}

func NewPostCreateClient(cc *grpc.ClientConn) PostCreateClient {
	return &postCreateClient{cc}
}

func (c *postCreateClient) Execute(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.PostCreate/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostCreate service

type PostCreateServer interface {
	Execute(context.Context, *Stack) (*Empty, error)
}

func RegisterPostCreateServer(s *grpc.Server, srv PostCreateServer) {
	s.RegisterService(&_PostCreate_serviceDesc, srv)
}

func _PostCreate_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostCreateServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PostCreate/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostCreateServer).Execute(ctx, req.(*Stack))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostCreate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PostCreate",
	HandlerType: (*PostCreateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _PostCreate_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "furnace.proto",
}

// Client API for PreDelete service

type PreDeleteClient interface {
	Execute(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Proceed, error)
}

type preDeleteClient struct {
	cc *grpc.ClientConn
}

func NewPreDeleteClient(cc *grpc.ClientConn) PreDeleteClient {
	return &preDeleteClient{cc}
}

func (c *preDeleteClient) Execute(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Proceed, error) {
	out := new(Proceed)
	err := grpc.Invoke(ctx, "/proto.PreDelete/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PreDelete service

type PreDeleteServer interface {
	Execute(context.Context, *Stack) (*Proceed, error)
}

func RegisterPreDeleteServer(s *grpc.Server, srv PreDeleteServer) {
	s.RegisterService(&_PreDelete_serviceDesc, srv)
}

func _PreDelete_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreDeleteServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PreDelete/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreDeleteServer).Execute(ctx, req.(*Stack))
	}
	return interceptor(ctx, in, info, handler)
}

var _PreDelete_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PreDelete",
	HandlerType: (*PreDeleteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _PreDelete_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "furnace.proto",
}

// Client API for PostDelete service

type PostDeleteClient interface {
	Execute(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Empty, error)
}

type postDeleteClient struct {
	cc *grpc.ClientConn
}

func NewPostDeleteClient(cc *grpc.ClientConn) PostDeleteClient {
	return &postDeleteClient{cc}
}

func (c *postDeleteClient) Execute(ctx context.Context, in *Stack, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.PostDelete/Execute", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PostDelete service

type PostDeleteServer interface {
	Execute(context.Context, *Stack) (*Empty, error)
}

func RegisterPostDeleteServer(s *grpc.Server, srv PostDeleteServer) {
	s.RegisterService(&_PostDelete_serviceDesc, srv)
}

func _PostDelete_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Stack)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostDeleteServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PostDelete/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostDeleteServer).Execute(ctx, req.(*Stack))
	}
	return interceptor(ctx, in, info, handler)
}

var _PostDelete_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PostDelete",
	HandlerType: (*PostDeleteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _PostDelete_Execute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "furnace.proto",
}

func init() { proto1.RegisterFile("furnace.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x2b, 0x2d, 0xca,
	0x4b, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53, 0x4a, 0xd2, 0x5c,
	0xac, 0xc1, 0x25, 0x89, 0xc9, 0xd9, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0x92, 0x22, 0x17, 0x7b, 0x40, 0x51, 0x7e, 0x72, 0x6a,
	0x6a, 0x8a, 0x90, 0x18, 0x17, 0x5b, 0x5a, 0x62, 0x66, 0x4e, 0x6a, 0x0a, 0x58, 0x01, 0x47, 0x10,
	0x94, 0xa7, 0xc4, 0xce, 0xc5, 0xea, 0x9a, 0x5b, 0x50, 0x52, 0x69, 0x64, 0xc2, 0xc5, 0x19, 0x50,
	0x94, 0xea, 0x5c, 0x94, 0x9a, 0x58, 0x92, 0x2a, 0xa4, 0xce, 0xc5, 0xee, 0x5a, 0x91, 0x9a, 0x5c,
	0x5a, 0x92, 0x2a, 0xc4, 0x03, 0xb1, 0x4f, 0x0f, 0x6c, 0x8b, 0x14, 0x1f, 0x94, 0x07, 0x35, 0xd6,
	0xc8, 0x98, 0x8b, 0x2b, 0x20, 0xbf, 0xb8, 0x04, 0xaa, 0x4d, 0x15, 0x97, 0x36, 0x18, 0x0f, 0xd9,
	0x2a, 0x97, 0xd4, 0x9c, 0x54, 0x32, 0xac, 0x82, 0x6a, 0x23, 0xce, 0xaa, 0x24, 0x36, 0x30, 0xc7,
	0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x19, 0x61, 0xe7, 0x1d, 0x3d, 0x01, 0x00, 0x00,
}
